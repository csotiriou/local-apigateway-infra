{
  "version": 4,
  "terraform_version": "1.6.6",
  "serial": 41,
  "lineage": "fd3c7e91-5956-09ce-c93a-4686603c74f5",
  "outputs": {
    "keycloak_credentials": {
      "value": {
        "password": "fd3b0062cea741ca9d68960ece24aa07",
        "username": "admin"
      },
      "type": [
        "map",
        "string"
      ]
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "kubernetes_secret_v1",
      "name": "initial_keycloak_credentials",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "password": "fd3b0062cea741ca9d68960ece24aa07",
              "username": "admin"
            },
            "id": "keycloak/main-keycloak-initial-admin",
            "immutable": false,
            "metadata": [
              {
                "annotations": {
                  "javaoperatorsdk.io/previous": "1e0e311f-a592-4f13-a049-ab68bb98ee1b"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app": "keycloak",
                  "app.kubernetes.io/instance": "main-keycloak",
                  "app.kubernetes.io/managed-by": "keycloak-operator"
                },
                "name": "main-keycloak-initial-admin",
                "namespace": "keycloak",
                "resource_version": "554",
                "uid": "317014dc-795e-48c3-ae34-fb7ced506b8e"
              }
            ],
            "type": "kubernetes.io/basic-auth"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "apisix_helm",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./config/apisix/apisix-helm-chart-master/charts/apisix",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": true,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": true,
            "id": "apisix",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.6.0",
                "chart": "apisix",
                "first_deployed": 1719491151,
                "last_deployed": 1719596496,
                "name": "apisix",
                "namespace": "ingress-apisix",
                "notes": "Get the application URL by running these commands:\nexport POD_NAME=$(kubectl get pods --namespace ingress-apisix -l \"app.kubernetes.io/name=ingress-controller,app.kubernetes.io/instance=apisix\" -o jsonpath=\"{.items[0].metadata.name}\")\nexport CONTAINER_PORT=$(kubectl get pod --namespace ingress-apisix $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\necho \"Visit http://127.0.0.1:8080 to use your application\"\nkubectl --namespace ingress-apisix port-forward $POD_NAME 8080:$CONTAINER_PORT\n\n1. Get the application URL by running these commands:\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace ingress-apisix svc -w apisix-gateway'\n  export SERVICE_IP=$(kubectl get svc --namespace ingress-apisix apisix-gateway --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:80\n\nCHART NAME: etcd\nCHART VERSION: 8.7.7\nAPP VERSION: 3.5.7\n\n** Please be patient while the chart is being deployed **\n\netcd can be accessed via port 2379 on the following DNS name from within your cluster:\n\n    apisix-etcd.ingress-apisix.svc.cluster.local\n\nTo create a pod that you can use as a etcd client run the following command:\n\n    kubectl run apisix-etcd-client --restart='Never' --image docker.io/bitnami/etcd:3.5.7-debian-11-r14 --env ETCDCTL_ENDPOINTS=\"apisix-etcd.ingress-apisix.svc.cluster.local:2379\" --namespace ingress-apisix --command -- sleep infinity\n\nThen, you can set/get a key using the commands below:\n\n    kubectl exec --namespace ingress-apisix -it apisix-etcd-client -- bash\n    etcdctl  put /message Hello\n    etcdctl  get /message\n\nTo connect to your etcd server from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace ingress-apisix svc/apisix-etcd 2379:2379 \u0026\n    echo \"etcd URL: http://127.0.0.1:2379\"",
                "revision": 2,
                "values": "{\"admin\":{\"allow\":{\"ipList\":[\"0.0.0.0/0\"]}},\"customPlugins\":{\"enabled\":true,\"luaPath\":\"/opts/custom_plugins/?.lua\",\"plugins\":[{\"attrs\":{},\"configMap\":{\"mounts\":[{\"key\":\"custom-response.lua\",\"path\":\"/usr/local/apisix/apisix/plugins/custom-response.lua\"}],\"name\":\"custom-response-config\"},\"name\":\"custom-response\"},{\"attrs\":{},\"configMap\":{\"mounts\":[{\"key\":\"add-clientid-header.lua\",\"path\":\"/usr/local/apisix/apisix/plugins/add-clientid-header.lua\"}],\"name\":\"add-clientid-header-config\"},\"name\":\"add-clientid-header\"}]},\"etcd\":{\"replicaCount\":1},\"gateway\":{\"type\":\"LoadBalancer\"},\"ingress-controller\":{\"config\":{\"apisix\":{\"serviceNamespace\":\"ingress-apisix\"}},\"enabled\":true},\"logs\":{\"errorLogLevel\":\"debug\"},\"plugins\":[\"real-ip\",\"ai\",\"client-control\",\"proxy-control\",\"request-id\",\"zipkin\",\"ext-plugin-pre-req\",\"fault-injection\",\"mocking\",\"serverless-pre-function\",\"cors\",\"ip-restriction\",\"ua-restriction\",\"referer-restriction\",\"csrf\",\"uri-blocker\",\"request-validation\",\"chaitin-waf\",\"openid-connect\",\"cas-auth\",\"authz-casbin\",\"authz-casdoor\",\"wolf-rbac\",\"ldap-auth\",\"hmac-auth\",\"basic-auth\",\"jwt-auth\",\"key-auth\",\"consumer-restriction\",\"forward-auth\",\"opa\",\"authz-keycloak\",\"proxy-cache\",\"body-transformer\",\"proxy-mirror\",\"proxy-rewrite\",\"add-clientid-header\",\"workflow\",\"api-breaker\",\"limit-conn\",\"limit-count\",\"limit-req\",\"gzip\",\"server-info\",\"traffic-split\",\"redirect\",\"response-rewrite\",\"degraphql\",\"kafka-proxy\",\"grpc-transcode\",\"grpc-web\",\"public-api\",\"prometheus\",\"datadog\",\"loki-logger\",\"elasticsearch-logger\",\"echo\",\"loggly\",\"http-logger\",\"splunk-hec-logging\",\"skywalking-logger\",\"google-cloud-logging\",\"sls-logger\",\"tcp-logger\",\"kafka-logger\",\"rocketmq-logger\",\"syslog\",\"udp-logger\",\"file-logger\",\"clickhouse-logger\",\"tencent-cloud-cls\",\"inspect\",\"example-plugin\",\"add-transactionid-header\",\"aws-lambda\",\"azure-functions\",\"openwhisk\",\"openfunction\",\"serverless-post-function\",\"ext-plugin-post-req\",\"ext-plugin-post-resp\",\"custom-response\"]}",
                "version": "1.7.2"
              }
            ],
            "name": "apisix",
            "namespace": "ingress-apisix",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.apiseven.com",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "gateway:\n  type: LoadBalancer\ningress-controller:\n  enabled: true\n  config:\n    apisix:\n      serviceNamespace: ingress-apisix\nadmin:\n  allow:\n    ipList:\n      - \"0.0.0.0/0\"\n\n\netcd:\n  replicaCount: 1\nlogs:\n  errorLogLevel: \"debug\"\n\ncustomPlugins:\n  enabled: true\n  luaPath: \"/opts/custom_plugins/?.lua\"\n  plugins:\n    - name: \"custom-response\"\n      attrs: {}\n      configMap:\n        name: \"custom-response-config\"\n        mounts:\n          - key: \"custom-response.lua\"\n            path: \"/usr/local/apisix/apisix/plugins/custom-response.lua\"\n    - name: \"add-clientid-header\"\n      attrs: {}\n      configMap:\n        name: \"add-clientid-header-config\"\n        mounts:\n          - key: \"add-clientid-header.lua\"\n            path: \"/usr/local/apisix/apisix/plugins/add-clientid-header.lua\"\n\n\nplugins:                           # plugin list (sorted by priority)\n  - real-ip                        # priority: 23000\n  - ai                             # priority: 22900\n  - client-control                 # priority: 22000\n  - proxy-control                  # priority: 21990\n  - request-id                     # priority: 12015\n  - zipkin                         # priority: 12011\n  - ext-plugin-pre-req             # priority: 12000\n  - fault-injection                # priority: 11000\n  - mocking                        # priority: 10900\n  - serverless-pre-function        # priority: 10000\n  - cors                           # priority: 4000\n  - ip-restriction                 # priority: 3000\n  - ua-restriction                 # priority: 2999\n  - referer-restriction            # priority: 2990\n  - csrf                           # priority: 2980\n  - uri-blocker                    # priority: 2900\n  - request-validation             # priority: 2800\n  - chaitin-waf                    # priority: 2700\n  - openid-connect                 # priority: 2599\n  - cas-auth                       # priority: 2597\n  - authz-casbin                   # priority: 2560\n  - authz-casdoor                  # priority: 2559\n  - wolf-rbac                      # priority: 2555\n  - ldap-auth                      # priority: 2540\n  - hmac-auth                      # priority: 2530\n  - basic-auth                     # priority: 2520\n  - jwt-auth                       # priority: 2510\n  - key-auth                       # priority: 2500\n  - consumer-restriction           # priority: 2400\n  - forward-auth                   # priority: 2002\n  - opa                            # priority: 2001\n  - authz-keycloak                 # priority: 2000\n  - proxy-cache                    # priority: 1085\n  - body-transformer               # priority: 1080\n  - proxy-mirror                   # priority: 1010\n  - proxy-rewrite                  # priority: 1008\n  - add-clientid-header        # priority: 1007\n  - workflow                       # priority: 1006\n  - api-breaker                    # priority: 1005\n  - limit-conn                     # priority: 1003\n  - limit-count                    # priority: 1002\n  - limit-req                      # priority: 1001\n  - gzip                           # priority: 995\n  - server-info                    # priority: 990\n  - traffic-split                  # priority: 966\n  - redirect                       # priority: 900\n  - response-rewrite               # priority: 899\n  - degraphql                      # priority: 509\n  - kafka-proxy                    # priority: 508\n  - grpc-transcode                 # priority: 506\n  - grpc-web                       # priority: 505\n  - public-api                     # priority: 501\n  - prometheus                     # priority: 500\n  - datadog                        # priority: 495\n  - loki-logger                    # priority: 414\n  - elasticsearch-logger           # priority: 413\n  - echo                           # priority: 412\n  - loggly                         # priority: 411\n  - http-logger                    # priority: 410\n  - splunk-hec-logging             # priority: 409\n  - skywalking-logger              # priority: 408\n  - google-cloud-logging           # priority: 407\n  - sls-logger                     # priority: 406\n  - tcp-logger                     # priority: 405\n  - kafka-logger                   # priority: 403\n  - rocketmq-logger                # priority: 402\n  - syslog                         # priority: 401\n  - udp-logger                     # priority: 400\n  - file-logger                    # priority: 399\n  - clickhouse-logger              # priority: 398\n  - tencent-cloud-cls              # priority: 397\n  - inspect                        # priority: 200\n  # \u003c- recommend to use priority (0, 100) for your custom plugins\n  - example-plugin                 # priority: 0\n  - add-transactionid-header       # priority: -5\n  - aws-lambda                     # priority: -1899\n  - azure-functions                # priority: -1900\n  - openwhisk                      # priority: -1901\n  - openfunction                   # priority: -1902\n  - serverless-post-function       # priority: -2000\n  - ext-plugin-post-req            # priority: -3000\n  - ext-plugin-post-resp           # priority: -4000\n  - custom-response                # priority: -5000\n"
            ],
            "verify": false,
            "version": "1.7.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_config_map_v1.add-clientid-header_configmap",
            "kubernetes_config_map_v1.custom_response_plugin_configmap",
            "kubernetes_namespace_v1.apisix_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "keycloak_postgres",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "postgresql",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "keycloak-postgres",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "16.3.0",
                "chart": "postgresql",
                "first_deployed": 1719491011,
                "last_deployed": 1719491011,
                "name": "keycloak-postgres",
                "namespace": "keycloak",
                "notes": "CHART NAME: postgresql\nCHART VERSION: 15.5.11\nAPP VERSION: 16.3.0\n\n** Please be patient while the chart is being deployed **\n\nPostgreSQL can be accessed via port 5432 on the following DNS names from within your cluster:\n\n    keycloak-postgres-postgresql.keycloak.svc.cluster.local - Read/Write connection\n\nTo get the password for \"postgres\" run:\n\n    export POSTGRES_ADMIN_PASSWORD=$(kubectl get secret --namespace keycloak keycloak-postgres-postgresql -o jsonpath=\"{.data.postgres-password}\" | base64 -d)\n\nTo get the password for \"keycloak\" run:\n\n    export POSTGRES_PASSWORD=$(kubectl get secret --namespace keycloak keycloak-postgres-postgresql -o jsonpath=\"{.data.password}\" | base64 -d)\n\nTo connect to your database run the following command:\n\n    kubectl run keycloak-postgres-postgresql-client --rm --tty -i --restart='Never' --namespace keycloak --image docker.io/bitnami/postgresql:14 --env=\"PGPASSWORD=$POSTGRES_PASSWORD\" \\\n      --command -- psql --host keycloak-postgres-postgresql -U keycloak -d keycloak -p 5432\n\n    \u003e NOTE: If you access the container using bash, make sure that you execute \"/opt/bitnami/scripts/postgresql/entrypoint.sh /bin/bash\" in order to avoid the error \"psql: local user with ID 1001} does not exist\"\n\nTo connect to your database from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace keycloak svc/keycloak-postgres-postgresql 5432:5432 \u0026\n    PGPASSWORD=\"$POSTGRES_PASSWORD\" psql --host 127.0.0.1 -U keycloak -d keycloak -p 5432\n\nWARNING: The configured password will be ignored on new installation in case when previous PostgreSQL release was deleted through the helm command. In that case, old PVC will have an old password, and setting it through helm won't take effect. Deleting persistent volumes (PVs) will solve the issue.\nWARNING: Rolling tag detected (bitnami/postgresql:14), please note that it is strongly recommended to avoid using rolling tags in a production environment.\n+info https://docs.vmware.com/en/VMware-Tanzu-Application-Catalog/services/tutorials/GUID-understand-rolling-tags-containers-index.html\n\nWARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\n  - primary.resources\n  - readReplicas.resources\n+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n\n⚠ SECURITY WARNING: Original containers have been substituted. This Helm chart was designed, tested, and validated on multiple platforms using a specific set of Bitnami and Tanzu Application Catalog containers. Substituting other containers is likely to cause degraded security and performance, broken chart features, and missing environment variables.\n\nSubstituted images detected:\n  - docker.io/bitnami/postgresql:14",
                "revision": 1,
                "values": "{\"auth\":{\"database\":\"keycloak\",\"password\":\"keycloak\",\"username\":\"keycloak\"},\"image\":{\"pullPolicy\":\"Always\",\"tag\":\"14\"}}",
                "version": "15.5.11"
              }
            ],
            "name": "keycloak-postgres",
            "namespace": "keycloak",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.bitnami.com/bitnami",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "auth:\n  database: keycloak\n  password: keycloak\n  username: keycloak\nimage:\n  pullPolicy: Always\n  tag: \"14\"\n"
            ],
            "verify": false,
            "version": "15.5.11",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace_v1.keycloak_namespace",
            "kubernetes_secret_v1.keycloak_certificate",
            "null_resource.install_keycloak_operator_script"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "keycloak_proxy",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./config/keycloakproxy/helm",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "keycloakproxy4",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.16.0",
                "chart": "keycloakproxy",
                "first_deployed": 1719726010,
                "last_deployed": 1719727543,
                "name": "keycloakproxy4",
                "namespace": "keycloak",
                "notes": "",
                "revision": 2,
                "values": "{}",
                "version": "0.1.0"
              }
            ],
            "name": "keycloakproxy4",
            "namespace": "keycloak",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 20,
            "values": null,
            "verify": false,
            "version": "0.1.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.keycloak_postgres",
            "kubectl_manifest.keycloak_installation",
            "kubernetes_namespace_v1.keycloak_namespace",
            "kubernetes_secret_v1.keycloak_certificate",
            "kubernetes_secret_v1.keycloak_db_secret",
            "null_resource.install_keycloak_operator_script"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "keycloak_installation",
      "provider": "provider[\"registry.terraform.io/alekc/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "k8s.keycloak.org/v2alpha1",
            "apply_only": false,
            "field_manager": "kubectl",
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/k8s.keycloak.org/v2alpha1/namespaces/keycloak/keycloaks/main-keycloak",
            "ignore_fields": null,
            "kind": "Keycloak",
            "live_manifest_incluster": "90ff2c6b189e48cd8ca114818b616f2dada5e2e1f4e1fff5b9adcae8837283ca",
            "live_uid": "f3f60226-4a72-42d2-9c64-f939af3cc7c0",
            "name": "main-keycloak",
            "namespace": "keycloak",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "f3f60226-4a72-42d2-9c64-f939af3cc7c0",
            "validate_schema": true,
            "wait": null,
            "wait_for": [],
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: k8s.keycloak.org/v2alpha1\nkind: Keycloak\nmetadata:\n  name: main-keycloak\n  namespace: keycloak\nspec:\n  instances: 1\n  http:\n    httpEnabled: true\n    httpPort: 8080\n  hostname:\n    strict: false\n    strictBackchannel: false\n  ingress:\n    enabled: false\n  db:\n    vendor: postgres\n    host: keycloak-postgres-postgresql\n    usernameSecret:\n      name: keycloak-db-secret\n      key: username\n    passwordSecret:\n      name: keycloak-db-secret\n      key: password\n  log:\n    logLevel: TRACE\n",
            "yaml_body_parsed": "apiVersion: k8s.keycloak.org/v2alpha1\nkind: Keycloak\nmetadata:\n  name: main-keycloak\n  namespace: keycloak\nspec:\n  db:\n    host: keycloak-postgres-postgresql\n    passwordSecret:\n      key: password\n      name: keycloak-db-secret\n    usernameSecret:\n      key: username\n      name: keycloak-db-secret\n    vendor: postgres\n  hostname:\n    strict: false\n    strictBackchannel: false\n  http:\n    httpEnabled: true\n    httpPort: 8080\n  ingress:\n    enabled: false\n  instances: 1\n  log:\n    logLevel: TRACE\n",
            "yaml_incluster": "90ff2c6b189e48cd8ca114818b616f2dada5e2e1f4e1fff5b9adcae8837283ca"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.keycloak_postgres",
            "kubernetes_namespace_v1.keycloak_namespace",
            "kubernetes_secret_v1.keycloak_certificate",
            "kubernetes_secret_v1.keycloak_db_secret",
            "null_resource.install_keycloak_operator_script"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_config_map_v1",
      "name": "add-clientid-header_configmap",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": {},
            "data": {
              "add-clientid-header.lua": "local jwt = require(\"resty.jwt\")\nlocal core = require(\"apisix.core\")\nlocal ngx_re = require(\"ngx.re\")\nlocal plugin_name = \"add-clientid-header\"\nlocal ngx = ngx\n\nlocal string = string\n\n-- define the schema for the Plugin\nlocal schema = {\n    type = \"object\"\n}\n\nlocal _M = {\n    version = 0.1,\n    priority = 2596,\n    name = plugin_name,\n    schema = schema\n}\n\nfunction _M.check_schema(conf)\n    return true\nend\n\nlocal function get_bearer_access_token(ctx)\n    -- Get Authorization header, maybe.\n    local auth_header = core.request.header(ctx, \"Authorization\")\n    if not auth_header then\n        -- No Authorization header, get X-Access-Token header, maybe.\n        local access_token_header = core.request.header(ctx, \"X-Access-Token\")\n        if not access_token_header then\n            -- No X-Access-Token header neither.\n            return false\n        end\n\n        -- Return extracted header value.\n        return true, access_token_header, nil\n    end\n\n    -- Check format of Authorization header.\n    local res, err = ngx_re.split(auth_header, \" \", nil, nil, 2)\n\n    if not res then\n        -- No result was returned.\n        return false, nil, err\n    elseif #res \u003c 2 then\n        -- Header doesn't split into enough tokens.\n        return false, nil, \"Invalid Authorization header format.\"\n    end\n\n    if string.lower(res[1]) == \"bearer\" then\n        -- Return extracted token.\n        return true, res[2], nil\n    end\n\n    return false, nil, nil\nend\n\nlocal function isEmpty(s)\n    return s == nil or s == ''\nend\n\nfunction _M.rewrite(plugin_conf, ctx)\n\n    local clientIdHeader = plugin_conf.header_name and plugin_conf.header_name or \"x-cell-client-id\"\n\n    core.log.debug(\"Custom Header name: \", clientIdHeader)\n\n\n    if(core.request.header(ctx, clientIdHeader)) then\n        core.log.debug(\"Header \", clientIdHeader, \" already exists in the request\")\n        core.log.debug(\"Skipping add-client-id-header plugin execution\")\n        return\n    end\n\n    local has_token, jwt_token, err = get_bearer_access_token(ctx)\n    core.log.debug(\"has_token: \", has_token, \" err: \", err)\n\n    if not (isEmpty(err) and has_token) then\n        core.log.debug(\"No JWT token found in Authorization or X-Access-Token header\")\n        return\n    end\n\n    local jwt_obj, jwtErr = jwt:load_jwt(jwt_token)\n\n    if jwt_obj and jwt_obj.payload then\n        local client_id = jwt_obj.payload.client_id\n        ngx.log(ngx.DEBUG, \"JWT payload decoded\")\n        if client_id then\n            -- Add the client_id as a custom header to the request\n            core.request.set_header(ctx, clientIdHeader, client_id)\n            core.log.debug(\"Added Custom Header\",clientIdHeader, \" with value: \", client_id)\n        else\n            core.log.debug(\"No client_id found in JWT payload\")\n        end\n    else\n        core.log.debug(\"Error decoding JWT: \", jwtErr)\n    end\nend\n\nreturn _M\n"
            },
            "id": "ingress-apisix/add-clientid-header-config",
            "immutable": false,
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "add-clientid-header-config",
                "namespace": "ingress-apisix",
                "resource_version": "652",
                "uid": "b2b2a102-e997-46b3-88f9-7608d3e12d54"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "kubernetes_namespace_v1.apisix_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_config_map_v1",
      "name": "custom_response_plugin_configmap",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": {},
            "data": {
              "custom-response.lua": "-- some required functionalities are provided by apisix.core\nlocal core = require(\"apisix.core\")\n\n-- define the schema for the Plugin\nlocal schema = {\n    type = \"object\",\n    properties = {\n        body = {\n            description = \"custom response to replace the Upstream response with.\",\n            type = \"string\"\n        },\n    },\n    required = {\"body\"},\n}\n\nlocal plugin_name = \"custom-response\"\n\n-- custom Plugins usually have priority between 1 and 99\n-- higher number = higher priority\nlocal _M = {\n    version = 0.1,\n    priority = 23,\n    name = plugin_name,\n    schema = schema,\n}\n\n-- verify the specification\nfunction _M.check_schema(conf)\n    return core.schema.check(schema, conf)\nend\n\n-- run the Plugin in the access phase of the OpenResty lifecycle\nfunction _M.access(conf, ctx)\n    return 200, conf.body\nend\n\nreturn _M\n"
            },
            "id": "ingress-apisix/custom-response-config",
            "immutable": false,
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "custom-response-config",
                "namespace": "ingress-apisix",
                "resource_version": "653",
                "uid": "e16e3bb6-a068-4c03-a3eb-6d36ed60cd21"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "kubernetes_namespace_v1.apisix_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_ingress_v1",
      "name": "keycloak_ingress",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "keycloak/keycloak-ingress",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 1,
                "labels": {},
                "name": "keycloak-ingress",
                "namespace": "keycloak",
                "resource_version": "534",
                "uid": "1209d713-592c-45b4-be08-adef55a08a63"
              }
            ],
            "spec": [
              {
                "default_backend": [],
                "ingress_class_name": "apisix",
                "rule": [
                  {
                    "host": "keycloak.k8s.orb.local",
                    "http": [
                      {
                        "path": [
                          {
                            "backend": [
                              {
                                "resource": [],
                                "service": [
                                  {
                                    "name": "keycloak-proxy",
                                    "port": [
                                      {
                                        "name": "",
                                        "number": 80
                                      }
                                    ]
                                  }
                                ]
                              }
                            ],
                            "path": "/",
                            "path_type": "Prefix"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "tls": []
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": []
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "helm_release.keycloak_postgres",
            "kubectl_manifest.keycloak_installation",
            "kubernetes_namespace_v1.keycloak_namespace",
            "kubernetes_secret_v1.keycloak_certificate",
            "kubernetes_secret_v1.keycloak_db_secret",
            "null_resource.install_keycloak_operator_script"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace_v1",
      "name": "apisix_namespace",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "ingress-apisix",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "ingress-apisix",
                "resource_version": "647",
                "uid": "ebce47ce-ee29-4549-b9f3-84dff292d23d"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace_v1",
      "name": "keycloak_namespace",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "keycloak",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "keycloak",
                "resource_version": "397",
                "uid": "984b0248-dcb6-4614-ae45-2d172e7f6e67"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret_v1",
      "name": "keycloak_certificate",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "tls.crt": "-----BEGIN CERTIFICATE-----\nMIIDZTCCAk2gAwIBAgIUFMg+s77WZSO5L84UCyPmvDlP4oIwDQYJKoZIhvcNAQEL\nBQAwQjEaMBgGA1UEAwwRdGVzdC5rZXljbG9hay5vcmcxFzAVBgNVBAoMDlRlc3Qg\nS2V5Y2xvYWsuMQswCQYDVQQGEwJVUzAeFw0yMzEwMTMwNjE4MzhaFw0yNDEwMTIw\nNjE4MzhaMEIxGjAYBgNVBAMMEXRlc3Qua2V5Y2xvYWsub3JnMRcwFQYDVQQKDA5U\nZXN0IEtleWNsb2FrLjELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQDKhHJuZmsfB27toDciUhTQarMVNY/NrlNMvaT5pQwLPXc14POl\nfv9OI1QI5ARtw1PxS7jtOy+EUO/Lj7e+6vN0qLhnSxe4y8Q12XAP93Odj14sslfA\necP37+JfdGQ/7v19knSXMQ+pWdCOb+N6f3N5slgSqT7Kok9O2hNnoaRKVR5HpkWs\nS1SCj+RkPcDmLfbgCv71P3QIw7uvzy2scOAi++flPw+C8nJJy9ZnQ3XqUnp++x2I\n0s6sCimLBWu5VwmgpIAHmGQP94zGyZp1wTUIBjhwOusIHoGxRL9ncTEd3QHRgQGq\nn6WT0JiS3ap3ucCIwBrntfbI+TQExUcIizozAgMBAAGjUzBRMB0GA1UdDgQWBBRL\nCtvBwIhwzKLtLM9R1ds4vT9Q9TAfBgNVHSMEGDAWgBRLCtvBwIhwzKLtLM9R1ds4\nvT9Q9TAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQDEutF1In+q\nD8qEEtVvStWd8JrRX+iWW5W8HjSMtNcopesZaYMH2HAm7+Jaao/n0bZwuif14Am5\nliwul+1OgJGlGqJmXFqGL+Lqh5bI4QIsaCuEuMVhTg8CerAQu59N+tREKGcRW0xU\naIXalW434r43FB1xQY567OsRZ6VblSgOKvxD+U0m9QklP+nN8t7jiNHT1S2YvpEb\nDKFvm3O07gqH2HOpDZLnmhxX6ilfTvdIsJy76lK7PovAw4hk2iYpHlvIT2d8u8ip\nLR8iBKljoCTLK/r7ej2n/vZamrcF+D9ZmV2yv0krQDlctLmor1BqVHF+kmXLMWgO\nxyRK8BYMwudA\n-----END CERTIFICATE-----\n",
              "tls.key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDKhHJuZmsfB27t\noDciUhTQarMVNY/NrlNMvaT5pQwLPXc14POlfv9OI1QI5ARtw1PxS7jtOy+EUO/L\nj7e+6vN0qLhnSxe4y8Q12XAP93Odj14sslfAecP37+JfdGQ/7v19knSXMQ+pWdCO\nb+N6f3N5slgSqT7Kok9O2hNnoaRKVR5HpkWsS1SCj+RkPcDmLfbgCv71P3QIw7uv\nzy2scOAi++flPw+C8nJJy9ZnQ3XqUnp++x2I0s6sCimLBWu5VwmgpIAHmGQP94zG\nyZp1wTUIBjhwOusIHoGxRL9ncTEd3QHRgQGqn6WT0JiS3ap3ucCIwBrntfbI+TQE\nxUcIizozAgMBAAECggEAT5LhP73gg22xSY91enfUE9yJB2FnYsMHmhS+ORV/+P6q\n07HTKokPGg3JnECz+MkSN7KwNA7Yad4/irWq1kqNZJ5S7stTw9nU+++3F578f8Fw\nmJFu54Mw3EAWq7kZFwH5+phMVYgChmFzEDSopl5j6kKIVrTHpmlGTk5j54lc+5No\nS4dam6JkWssH8X9oUfZjaypwmZjPbKrkVLlYbyAluOlOUWHjDEWHXLk3mp2GEzld\nmLPY2s58AUkdxYVJlDhfRm+ijU8K8VwWAMovSP1vecj/ABqcKP8XeDUhlIU9d7kf\nfKb6s4f8+uaoQGAkHSuqSHmY/69R+bH8YkFZAGZVWQKBgQD//JvBiabyJsHo5Fa0\nXFCUveLzVoRKvlr6+6lEnEvkZUrOYM8EMT7TCSZhcacjmeAkZIZnTBXP3NjNnwmx\ne1Hs2ZpVj1hBoOQLRv+WwN1grQkrPd18LectSNrjaqJnQYCULCFKyfIHJgGaH2YF\nDS6lX4y4cdBkWXxVPGisC/N3zQKBgQDKhyFR/b/ujMMRxeBUlwAOFWm69Jm6cJIo\nlbX6onxHrCo2h4HsqI24JKfW7FqculPjQpMoHnakZ6b+oDCVsVmmGXRZhdMTRPHF\nbgMY1xdNHvKqOr/ZkR/u3SOWAPmYnJTS1NbZHt1P+5X/pMhV16l2Zr+2UCf70t84\nJzHvPgN5/wKBgAYz5MJHx5fOgJxYDBHKutkf0MP8sK/u9N1oA63564zZN3rQtbNw\nTglnC1sJGfeu3tOC7A7MtSqYO1igJef7CP0oOKkiFA1jDKOJUOAiRDr3dmVp1lgP\n9K4QOd2Q0+aUm7z7ZMMfKZIqxZcqc5pju2GecxZ1C4ui73RRRmgE0h1xAoGBAK3I\nM/wx235rRHs8qtiK1V5AW4AzoLGNJK00gXl18WRiw7oUnpSesTSAJ5DRMJNpgs/v\n8WuscCt0UaQNeoMIMh/HmcGzhkHzl+3MD1ZCQllHo/wT+0lKMPd6w61UWtfsC/u4\n7D5UMJ0QCU7aa5jVPDE/y2M59oUsFaQOZdefA8arAoGBAMibKGvscPmngkMZn99+\n5l/yajCSeSFtsFWVADwjne73ZgYSOZtOvhKej1xXW3rX8WD2jon/lOxIEB1bR2i6\nZjl079dI9uD43fNhMsM+bLmUxaiAULdZ+t6xp2VZTxHJFrFcMQ6k0twUt1PGIWnr\nGKDAVEcvk29L9xV+0bkcKKZi\n-----END PRIVATE KEY-----\n"
            },
            "id": "keycloak/keycloak-certificate",
            "immutable": false,
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "keycloak-certificate",
                "namespace": "keycloak",
                "resource_version": "458",
                "uid": "e65135aa-496c-4937-a270-840a7bc74e91"
              }
            ],
            "timeouts": null,
            "type": "kubernetes.io/tls",
            "wait_for_service_account_token": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMH19",
          "dependencies": [
            "kubernetes_namespace_v1.keycloak_namespace"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret_v1",
      "name": "keycloak_db_secret",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "password": "keycloak",
              "username": "keycloak"
            },
            "id": "keycloak/keycloak-db-secret",
            "immutable": false,
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "keycloak-db-secret",
                "namespace": "keycloak",
                "resource_version": "457",
                "uid": "ffdc92c9-93ad-46db-9994-844027ef8160"
              }
            ],
            "timeouts": null,
            "type": "Opaque",
            "wait_for_service_account_token": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMH19",
          "dependencies": [
            "kubernetes_namespace_v1.keycloak_namespace",
            "null_resource.install_keycloak_operator_script"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "install_keycloak_operator_script",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "2127580106427760566",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "kubernetes_namespace_v1.keycloak_namespace"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
